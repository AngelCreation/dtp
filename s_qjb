/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.samyak.servlet;

import java.io.File;

/**
 *
 * @author admin
 */
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class QuartzJob implements Job {
	private static final int DELETE_FILE_DAYS = 1;
	String finalpath = "";

	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {
		try {

			File directory = new File(
					System.getProperty("catalina.base") + File.separator + "wtpwebapps/FileUpload/DocUpload");
			// System.out.println("dirWay : :dirWay : :" +
			// directory.getAbsolutePath());
			if (directory.exists()) {
				File[] listFiles = directory.listFiles();
				long purgeTime = System.currentTimeMillis() - (long) (DELETE_FILE_DAYS * 6 * 60 * 60 * 1000);
				for (File listFile : listFiles) {

					if (listFile.lastModified() <= purgeTime) {
						listFile.delete();
					}
					// System.out.println("Unable to delete file: " + listFile);

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("Deleteing files..");
	}
}





/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.samyak.servlet;

/**
 *
 * @author admin
 */
import static org.quartz.JobBuilder.newJob;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SimpleScheduleBuilder;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;

public class QuartzListener implements ServletContextListener {
	Scheduler scheduler = null;

	@Override
	public void contextInitialized(ServletContextEvent servletContext) {
		// System.out.println("Context Initialized");

		try {
			// .withSchedule(CronScheduleBuilder.cronSchedule("0/5 * * * * ?"))
			// Setup the Job class and the Job group
			JobDetail job = newJob(QuartzJob.class).withIdentity("CronQuartzJob", "Group").build();

			Trigger trigger = TriggerBuilder.newTrigger().withIdentity("TriggerName", "Group")
					.withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInMinutes(180).repeatForever())
					.build();

			// Create a Trigger that fires every 5 minutes.
			// Trigger trigger = newTrigger()
			// .withIdentity("TriggerName", "Group")
			// .withSchedule(CronScheduleBuilder.cronSchedule("0 0 24 * * ?"))
			// .build();

			// Setup the Job and Trigger with Scheduler & schedule jobs
			scheduler = new StdSchedulerFactory().getScheduler();
			scheduler.start();
			scheduler.scheduleJob(job, trigger);
		} catch (SchedulerException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void contextDestroyed(ServletContextEvent servletContext) {
		// System.out.println("Context Destroyed");
		try {
			scheduler.shutdown();
		} catch (SchedulerException e) {
			e.printStackTrace();
		}
	}

}

