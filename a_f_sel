package com.samyak.Fragments;

import android.graphics.Typeface;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.MimeTypeMap;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.commonsware.cwac.merge.MergeAdapter;
import com.samyak.Adapters.CustomList;
import com.samyak.Adapters.CustomListSingleOnly;
import com.samyak.R;
import com.samyak.model.OnBackPressedListener;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class FileSelectionFragment extends Fragment implements OnBackPressedListener, AdapterView.OnItemSelectedListener {

    private static final String TAG = "FileSelection";
    private static final String FILES_TO_UPLOAD = "upload";
    File mainPath = new File(Environment.getExternalStorageDirectory() + "");
    Button ok, all, cancel;
    Spinner storage;
    TextView path;
    Boolean Switch = false;
    Boolean switcher = false;
    String primary_sd;
    String secondary_sd;
    int index = 0;
    int top = 0;
    private TextView textviewTitle;
    private ArrayList<File> resultFileList = new ArrayList<File>();
    private ListView directoryView;
    private ArrayList<File> directoryList = new ArrayList<File>();
    private ArrayList<String> directoryNames = new ArrayList<String>();
    // private ListView fileView;
    private ArrayList<File> fileList = new ArrayList<File>();
    private ArrayList<String> fileNames = new ArrayList<String>();

    public FileSelectionFragment() {
        // Required empty public constructor
    }

    public static String getMimeType(String url) {
        String type = null;
        String extension = MimeTypeMap.getFileExtensionFromUrl(url);
        if (extension != null) {
            type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(
                    extension);
        }
        return type;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_file_selection, container, false);

        directoryView = (ListView) view.findViewById(R.id.directorySelectionList);
        ok = (Button) view.findViewById(R.id.ok);
        all = (Button) view.findViewById(R.id.all);
        cancel = (Button) view.findViewById(R.id.cancel);
        storage = (Spinner) view.findViewById(R.id.storage);
        path = (TextView) view.findViewById(R.id.folderpath);

        List<String> list = new ArrayList<String>();

        list.add("Internal");
        list.add("External");

        loadLists();

        ExtStorageSearch();

        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(getActivity(),
                android.R.layout.simple_spinner_dropdown_item, list);
        dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        storage.setAdapter(dataAdapter);

        storage.setOnItemSelectedListener(this);

        directoryView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view,
                                    int position, long id) {

                index = directoryView.getFirstVisiblePosition();
                View v = directoryView.getChildAt(0);
                top = (v == null) ? 0 : v.getTop();

                File lastPath = mainPath;
                try {
                    if (position < directoryList.size()) {
                        mainPath = directoryList.get(position);
                        loadLists();
                    } else if (position >= directoryList.size()) {
                        if (directoryView.isItemChecked(position) == true) {
                            if ((fileList.get(position
                                    - directoryList.size())).length() < 10000000) {
                                resultFileList.add(fileList.get(position
                                        - directoryList.size()));
                            } else {
                                Toast.makeText(getActivity(), "File Limit Excedded", Toast.LENGTH_SHORT).show();
                                directoryView.setItemChecked(position
                                        - directoryList.size() + 1, false);
                                resultFileList.remove(fileList.get(position
                                        - directoryList.size() + 1));
                            }

                        } else if (directoryView.isItemChecked(position) == false) {
                            resultFileList.remove(fileList.get(position
                                    - directoryList.size()));
                        }
                    }
                } catch (Throwable e) {
                    mainPath = lastPath;
                    loadLists();
                }
            }
        });

        ok.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                ok();
            }
        });

        cancel.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                FragmentManager fragmentManager = getFragmentManager();
                fragmentManager.beginTransaction().replace(R.id.frame, new HomeFragment(), "HomeFragment").addToBackStack(null).commit();
            }
        });

       /* storage.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                try {
                    if (!switcher) {
                        mainPath = new File(secondary_sd);
                        loadLists();
                        switcher = true;
                        storage.setText(getString(R.string.Int));
                    } else {
                        //inside internal
                        mainPath = new File(primary_sd);
                        loadLists();
                        switcher = false;
                        storage.setText(getString(R.string.ext));
                    }
                } catch (Throwable e) {

                }
            }
        });*/

        all.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (!Switch) {
                    for (int i = directoryList.size(); i < directoryView
                            .getCount(); i++) {
                        directoryView.setItemChecked(i, true);
                    }
                    all.setText(getString(R.string.none));
                    Switch = true;
                } else if (Switch) {
                    for (int i = directoryList.size(); i < directoryView
                            .getCount(); i++) {
                        directoryView.setItemChecked(i, false);
                    }
                    all.setText(getString(R.string.all));
                    Switch = false;
                }
            }

        });

        return view;
    }

    private void loadLists() {
        FileFilter fileFilter = new FileFilter() {
            public boolean accept(File file) {
                String filetype = getMimeType(file.toString().replace(" ", "_"));
                CharSequence cs = "image/";
                if (filetype != null) {
                    // System.out.println("file.toString() :: file.toString() :: "+
                    // file.length());
                    if ((filetype.contains(cs)
                            || file.toString().endsWith(".doc")
                            || file.toString().endsWith(".docx")
                            || file.toString().endsWith(".JPG")
                            || file.toString().endsWith(".TIF")
                            || file.toString().endsWith(".GIF")
                            || file.toString().endsWith(".TIFF")
                            || file.toString().endsWith(".xlsx")
                            || file.toString().endsWith(".xls")
                            || file.toString().endsWith(".csv")
                            || file.toString().endsWith(".pdf")
                            || file.toString().endsWith(".txt")
                            || file.toString().endsWith(".odt"))) {
//                            && file.length() <= 10000000) {
                        return file.isFile();
                    } else {
                        return false;
                    }
                }
                return false;

				/*
                 * System.out.println("Filetype :: "+filetype); return
				 * file.isFile();
				 */
            }
        };
        FileFilter directoryFilter = new FileFilter() {
            public boolean accept(File file) {
                return file.isDirectory();
            }
        };

        // if(mainPath.exists() && mainPath.length()>0){
        // Lista de directorios
        File[] tempDirectoryList = mainPath.listFiles(directoryFilter);

        if (tempDirectoryList != null && tempDirectoryList.length > 1) {
            Arrays.sort(tempDirectoryList, new Comparator<File>() {
                @Override
                public int compare(File object1, File object2) {
                    return object1.getName().compareTo(object2.getName());
                }
            });
        }

        directoryList = new ArrayList<File>();
        directoryNames = new ArrayList<String>();
        // Toast.makeText(this,
        // " tempDirectoryList :: tempDirectoryList : : : : " +
        // tempDirectoryList,
        // Toast.LENGTH_SHORT).show();
        for (File file : tempDirectoryList) {

            if (!file.getName().startsWith(".")) {
                directoryList.add(file);
                directoryNames.add(file.getName());
            }
//            directoryNames.add(file.getName());
        }
        ArrayAdapter<String> directoryAdapter = new ArrayAdapter<String>(getActivity(),
                android.R.layout.simple_list_item_1, directoryNames);

        // Lista de ficheros
        File[] tempFileList = mainPath.listFiles(fileFilter);

        if (tempFileList != null && tempFileList.length > 1) {
            Arrays.sort(tempFileList, new Comparator<File>() {
                @Override
                public int compare(File object1, File object2) {
                    return object1.getName().compareTo(object2.getName());
                }
            });
        }

        fileList = new ArrayList<File>();
        fileNames = new ArrayList<String>();
        for (File file : tempFileList) {
            fileList.add(file);
            fileNames.add(file.getName());
        }

        path.setText(mainPath.toString());
        iconload();
        getActivity().setTitle(mainPath.getName());
        // }
    }

    public void ExtStorageSearch() {
        String[] extStorlocs = {"/storage/sdcard1", "/storage/extsdcard",
                "/storage/sdcard0/external_sdcard", "/mnt/extsdcard",
                "/mnt/sdcard/external_sd", "/mnt/external_sd",
                "/mnt/media_rw/sdcard1", "/removable/microsd", "/mnt/emmc",
                "/storage/external_SD", "/storage/ext_sd",
                "/storage/removable/sdcard1", "/data/sdext", "/data/sdext2",
                "/data/sdext3", "/data/sdext4", "/storage/sdcard0"};

        // First Attempt
        primary_sd = System.getenv("EXTERNAL_STORAGE");
        secondary_sd = System.getenv("SECONDARY_STORAGE");

        if (primary_sd == null) {
            primary_sd = Environment.getExternalStorageDirectory() + "";
        }
        if (secondary_sd == null) {
            // if fail, search among known list of
            // extStorage Locations
            for (String string : extStorlocs) {
                if ((new File(string)).exists()
                        && (new File(string)).isDirectory()) {
                    secondary_sd = string;
                    break;
                }
            }
        }
    }

    public void iconload() {
        String[] foldernames = new String[directoryNames.size()];
        foldernames = directoryNames.toArray(foldernames);

        String[] filenames = new String[fileNames.size()];
        filenames = fileNames.toArray(filenames);

        CustomListSingleOnly adapter1 = new CustomListSingleOnly(
                getActivity(),
                directoryNames.toArray(foldernames), mainPath.getPath());
        CustomList adapter2 = new CustomList(getActivity(),
                fileNames.toArray(filenames), mainPath.getPath());

        MergeAdapter adap = new MergeAdapter();

        adap.addAdapter(adapter1);
        adap.addAdapter(adapter2);

        directoryView.setAdapter(adap);
        for (int i = 0; i < fileList.size(); i++) {
            if (resultFileList.contains(fileList.get(i))) {
                directoryView.setItemChecked(directoryList.size() + i, true);
            }
        }
    }

    public void ok() {
        Log.d(TAG, "Upload clicked, finishing activity");

//		resultFileList = new ArrayList<File>();
//
//		for (int i = 0; i < directoryView.getCount(); i++) {
//			if (directoryView.isItemChecked(i)) {
//				resultFileList.add(fileList.get(i - directoryList.size()));
//			}
//		}
        if (resultFileList.isEmpty()) {
            Toast.makeText(getActivity(),
                    "No Files Selected",
                    Toast.LENGTH_SHORT).show();
        } else {
            for (int i = 0; i < resultFileList.size(); i++) {
                if (resultFileList.get(i).toString().endsWith(".doc")
                        || resultFileList.get(i).toString().endsWith(".pdf")
                        || resultFileList.get(i).toString().endsWith(".png")
                        || resultFileList.get(i).toString().endsWith(".tiff")
                        || resultFileList.get(i).toString().endsWith(".tif")
                        || resultFileList.get(i).toString().endsWith(".bmp")
                        || resultFileList.get(i).toString().endsWith(".gif")
                        || resultFileList.get(i).toString().endsWith(".jpg")
                        || resultFileList.get(i).toString().endsWith(".xls")
                        || resultFileList.get(i).toString().endsWith(".docx")
                        || resultFileList.get(i).toString().endsWith(".xlsx")
                        || resultFileList.get(i).toString().endsWith(".csv")
                        || resultFileList.get(i).toString().endsWith(".txt")
                        || resultFileList.get(i).toString().endsWith(".odt")
                        || resultFileList.get(i).toString().endsWith(".DOC")
                        || resultFileList.get(i).toString().endsWith(".PDF")
                        || resultFileList.get(i).toString().endsWith(".PNG")
                        || resultFileList.get(i).toString().endsWith(".TIFF")
                        || resultFileList.get(i).toString().endsWith(".TIF")
                        || resultFileList.get(i).toString().endsWith(".BMP")
                        || resultFileList.get(i).toString().endsWith(".GIF")
                        || resultFileList.get(i).toString().endsWith(".JPG")
                        || resultFileList.get(i).toString().endsWith(".XLS")
                        || resultFileList.get(i).toString().endsWith(".DOCX")
                        || resultFileList.get(i).toString().endsWith(".XLSX")
                        || resultFileList.get(i).toString().endsWith(".CSV")
                        || resultFileList.get(i).toString().endsWith(".TXT")
                        || resultFileList.get(i).toString().endsWith(".ODT")) {

                    //move
                    Bundle bundle = new Bundle();
                    bundle.putString("SelectFile", "from Select file fragment");
                    bundle.putSerializable(FILES_TO_UPLOAD, resultFileList);

                    HomeFragment homeFragment = new HomeFragment();
                    homeFragment.setArguments(bundle);

                    FragmentManager fragmentManager = getFragmentManager();
                    fragmentManager.beginTransaction().replace(R.id.frame, homeFragment, "HomeFragment").addToBackStack(null).commit();

                } else {
                    Toast.makeText(getActivity(),
                            "All file must be .doc , .jpg , .png format only!! ",
                            Toast.LENGTH_SHORT).show();
                }
            }
        }
    }


    public void onBackPressed() {
        try {
//            Log.e("path","" + Environment.getExternalStorageDirectory());
            if (mainPath.equals(Environment.getExternalStorageDirectory()
                    .getParentFile().getParentFile())) {

                FragmentManager fragmentManager = getFragmentManager();
                fragmentManager.beginTransaction().replace(R.id.frame, new HomeFragment(), "HomeFragment").addToBackStack(null).commit();
            } else {
                File parent = mainPath.getParentFile();
                mainPath = parent;
                loadLists();
                directoryView.setSelectionFromTop(index, top);
            }

        } catch (Throwable e) {

        }
    }

    @Override
    public void onResume() {
        textviewTitle = (TextView) getActivity().findViewById(R.id.textviewTitle);
        textviewTitle.setText("Select File");
        super.onResume();
    }

    @Override
    public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {

        ((TextView) adapterView.getChildAt(0)).setTextColor(ContextCompat.getColor(getActivity(), R.color.primary));
        ((TextView) adapterView.getChildAt(0)).setTextSize(18);
        ((TextView) adapterView.getChildAt(0)).setTypeface(null, Typeface.BOLD);

        if (String.valueOf(storage.getSelectedItem()) == "External") {
            if (secondary_sd == null) {
                Toast toast = Toast.makeText(getActivity(), "No Sdcard available", Toast.LENGTH_SHORT);
                View v = toast.getView();
                v.setBackgroundResource(R.drawable.bg_toast);
//                    TextView text = (TextView) view.findViewById(android.R.id.message);
                toast.show();
                storage.setSelection(0);
            } else {
                mainPath = new File(secondary_sd);
                loadLists();
            }

        } else if (String.valueOf(storage.getSelectedItem()) == "Internal") {
            mainPath = new File(primary_sd);
            loadLists();
        }
    }

    @Override
    public void onNothingSelected(AdapterView<?> adapterView) {

    }
}
